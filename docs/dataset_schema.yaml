scheming_version: 2
dataset_type: dataset
about: A reimplementation of the default CKAN dataset schema extended with DataPusher+ Formulas!
about_url: http://github.com/ckan/ckanext-scheming


dataset_fields:

- field_name: title
  label: Title
  preset: title
  form_placeholder: eg. A descriptive title

- field_name: name
  label: URL
  preset: dataset_slug
  form_placeholder: eg. my-dataset

- field_name: notes
  label: Description
  form_snippet: markdown.html
  form_placeholder: eg. Some useful notes/blurb about the data

- field_name: latitude_range
  label: Latitude Range
  # this is a suggestion formula, so it's offered as a suggestion to the user.
  # Note how we use the dpp.LAT_FIELD variable to access the latitude field
  # dpp.LAT_FIELD is inferred based on heuristics (column name pattern is in
  # ckanext.datapusher_plus.latitude_fields and is a Float with range of -90.0 to 90.0)
  # and the stats.max and stats.min to get the range of values
  suggestion_formula: Latitudinal range {{dpps[dpp.LAT_FIELD].stats.max|float - dpps[dpp.LAT_FIELD].stats.min|float }} {{"the quick brown fox"|truncate_with_ellipsis(5)}}

- field_name: spatial_extent
  label: Spatial Extent
  form_snippet: markdown.html
  # spatial_extent_wkt() is a formula that returns the spatial extent of the dataset
  # as a WKT string, automatically using the inferred latitude and longitude fields
  # unless they're explicitly specified in the Jinja2 helper function below
  suggestion_formula: '{{ spatial_extent_wkt() }}'

- field_name: test_field
  label: Test Field
  # note how this is a formula and NOT a suggestion formula
  # so it's directly set at creation/update time and is not offered as a suggestion
  # This is just a simple Jinja2 expression where we accessing the package.author, with
  # the Jinja2 built-in filter to title case the author name,
  # and the package.author_email fields
  formula: 'Test formula field value:{{package.author|title}}: {{package.author_email}}'

- field_name: tag_string
  label: Tags
  preset: tag_string_autocomplete
  form_placeholder: eg. economy, mental health, government

- field_name: license_id
  label: License
  form_snippet: license.html
  help_text: License definitions and additional information can be found at http://opendefinition.org/

- field_name: owner_org
  label: Organization
  preset: dataset_organization

- field_name: url
  label: Source
  form_placeholder: http://example.com/dataset.json
  display_property: foaf:homepage
  display_snippet: link.html

- field_name: version
  label: Version
  validators: ignore_missing unicode_safe package_version_validator
  form_placeholder: '1.0'

- field_name: author
  label: Author
  form_placeholder: Joe Bloggs
  display_property: dc:creator

- field_name: author_email
  label: Author Email
  form_placeholder: joe@example.com
  display_property: dc:creator
  display_snippet: email.html
  display_email_name_field: author

- field_name: maintainer
  label: Maintainer
  form_placeholder: Joe Bloggs
  display_property: dc:contributor

- field_name: maintainer_email
  label: Maintainer Email
  form_placeholder: joe@example.com
  display_property: dc:contributor
  display_snippet: email.html
  display_email_name_field: maintainer

- field_name: frequency_info
  label: Frequency Info
  form_snippet: markdown.html
  # get_frequency_top_values() is a formula that returns the top values for the
  # frequency field, which is calculated using qsv frequency
  suggestion_formula: '{{ get_frequency_top_values("department") }}'

- field_name: dpp_suggestions
  label: DPP Suggestion
  preset: json_object

resource_fields:

- field_name: url
  label: URL
  preset: resource_url_upload

- field_name: name
  label: Name
  form_placeholder: eg. January 2011 Gold Prices

- field_name: description
  label: Description
  form_snippet: markdown.html
  form_placeholder: Some useful notes about the data

- field_name: spatial_extent
  label: Spatial Extent
  form_snippet: markdown.html
  # This is a suggestion formula that returns the spatial extent of the dataset
  # as a WKT string. Here, we're doing it "manually" using a Jinja2 expression, 
  # but you could also use the spatial_extent_wkt() formula instead.
  suggestion_formula: POLYGON(({{dpps[dpp.LAT_FIELD].stats.min|float}}, {{dpps[dpp.LON_FIELD].stats.min|float}}, {{dpps[dpp.LAT_FIELD].stats.max|float}}, {{dpps[dpp.LON_FIELD].stats.min|float}}, {{dpps[dpp.LAT_FIELD].stats.max|float}}, {{dpps[dpp.LON_FIELD].stats.max|float}}, {{dpps[dpp.LAT_FIELD].stats.min|float}}, {{dpps[dpp.LON_FIELD].stats.max|float}}, {{dpps[dpp.LAT_FIELD].stats.min|float}}, {{dpps[dpp.LON_FIELD].stats.min|float}}))


- field_name: format
  label: Format
  preset: resource_format_autocomplete

- field_name: temporal_resolution
  label: Temporal Resolution
  # This is a suggestion formula that returns the temporal resolution of the dataset
  # as a string. Similar to lat/lon field inferencing, this uses the ckanext.datapusher_plus.qsv_dates_whitelist
  # config option to infer date columns. The first column that matches the pattern is used by default,
  # but you can also specify a different column in the formula.
  suggestion_formula: '{{ temporal_resolution() }}'
